version = VERSION_NAME
group = GROUP

def isAndroidProject() {
  project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

if(isAndroidProject()) {
  apply plugin: 'com.github.dcendents.android-maven'
}
else {
  apply plugin: 'maven'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

ext {
  repositoryUsername = project.hasProperty('BINTRAY_USERNAME') ? property('BINTRAY_USERNAME') : ''
  repositoryKey = project.hasProperty('BINTRAY_KEY') ? property('BINTRAY_KEY') : ''
}

bintray {
  user = repositoryUsername
  key = repositoryKey
  configurations = ['archives']
  publish = true
  pkg {
    repo = 'toothpick'
    name = POM_NAME
    userOrg = 'staticbloc'
    licenses = ['Apache-2.0']
    vcsUrl = POM_URL
    publicDownloadNumbers = true
    version {
      name = VERSION_NAME
      released  = new Date()
      vcsTag = VERSION_NAME
    }
  }
}

artifactory {
  contextUrl = 'https://oss.jfrog.org/artifactory'
  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = repositoryUsername
      password = repositoryKey
      maven = true
    }

    defaults {
      publishConfigs('archives')
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId GROUP
      artifactId POM_ARTIFACT_ID
      version VERSION_NAME
    }
  }
}

install {
  repositories.mavenInstaller {
    pom.groupId = GROUP
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = VERSION_NAME

    pom.project {
      name POM_NAME
      packaging POM_PACKAGING
      description POM_DESCRIPTION
      url POM_URL

      scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_DEV_CONNECTION
      }

      licenses {
        license {
          name POM_LICENCE_NAME
          url POM_LICENCE_URL
          distribution POM_LICENCE_DIST
        }
      }

      developers {
        developer {
          id POM_DEVELOPER_ID
          name POM_DEVELOPER_NAME
        }
        developer {
          id 'eygraber'
          name 'Eliezer Graber'
        }
      }
    }
  }
}

if (isAndroidProject()) {
  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
  }
}
else {
  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

artifacts {
  if (isAndroidProject()) {
    archives androidSourcesJar
    archives androidJavadocsJar
  } else {
    archives sourcesJar
    archives javadocJar
  }
}